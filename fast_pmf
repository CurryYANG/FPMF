// PmfFinal.cpp : 定义控制台应用程序的入口点。


/* PMF.cpp : 定义控制台应用程序的入口点。
(1)从文件读取数据
   数据格式
   pID	mID	rate   
(2)调用内部函数randn_gauss()，初始化高斯分布随机值
(3)梯度下降算法迭代处理
(4)输出output.txt
   格式:
   D:	xx     epsilon:	xx    lambda:	xx  momentum:xx
   w1_P1    w1_M1
(5) PMF Commdand Format: PMF [-T:] [-P:] [-O:] [-d:] [-i:] [-e:] [-l:] [-m:] [-h]
    pmf -h for help
*/

/*
    变化：
	相对于之前的fast_pmf（是直接用原来的数据集，在迭代中对它经行排序）,在迭代前
	对数据集经行排序；
	排序的格式是：
	Pid1 Mid1 Rating
	Pid2 Mid1 Rating
	Pid3 Mid1 Rating
	......
	Pidn Mid2 Rating
	.......
	保证Mid是从小到大排序的
*/
#include "stdafx.h"
#include "math.h"
#include <iostream>
#include <fstream>
#include <sstream>
#include "conio.h"   //_getchar
#include <string> 
#include <stdio.h>
#include <tchar.h>
#include<time.h>
using namespace std;

#define D 100      /*dimension维度*/
#define U 6040    /*User  number用户数量*/
#define M 3952    /*Movie number电影数量*/
#define R  900000  /*train rate  number训练数据集*/
#define TN 100209  /*test  rate  number测试数据集*/

double w1_M1[M][D];  //movie  feature matrix电影特征矩阵
double zw1_M1[D][M];  //movie  电影特征矩阵的转置

double w1_P1[U][D];  //person feature matrix用户特征矩阵
double pRate[U][M] ; 
double w1_M1_inc[M][D];  
double w1_P1_inc[U][D];  
double Ix_m;  //movie  feature
double Ix_p;  //person feature
double pred_out[R];//预测数据
double p_out[R];
int flag_M[R];    //record the data relating to Movie need to be update
int flag_U[R];    //record the data relating to User need to be update
int jr_M[M+1];//recode ID of movie
int countM[M+1];//
int jr_U[U+1];//recode ID of user
int countU[U+1];//
double GM[R][D];//store old gradient
double residual[R][2];
double rescp[R][2];




/*paramater */
double epsilon=500;      /* Learning rate */
double lambda  = 0.01;  /* Regularization parameter 0.001 */
double lambdas = 0.2;   /*speed size*/
double temp = R;           /*store num*/
double momentum=0.8;    /* momentum 0.8 */
int DD=10;              /*dimension*/
int MAXEPOCH=500;        /*epoch  times*/
double meanRating;

struct rate
{
	int Pid;
	int Mid;
	double Rating;
	double PredRating;	
};
rate trainRate[R];    /*Rating data训练数据集*/
rate trainRate1[R];
rate trainRate2[R];
rate testRate[TN];    /*Rating data测试数据集*/
char trainfile[30]="train.txt";//char trainfile[30]="train.bin";
char testfile[30]="probe.txt";//char testfile[30]="probe.bin";
char outfile[30]="output.txt";
//function declare
int    getTData(int choice,rate *buff);
double randn_gauss(double a,double b);
void   OutputData(string s);
int    setPara(int argc,_TCHAR* argv[]);
void   printHelp(void);
int    getString(char *s,int i,_TCHAR* argv[]);

void   quicksort(double arr[][2],int left,int right);

int _tmain(int argc, _TCHAR* argv[])//初始状态下argc值为1
{	
	int    ii;		
	double lsum=0;
	double ltsum=0;
	int    lPid;
	int    lMid;	
	int    i,j,k;	
	
	printHelp();
	//set run parameter 	
	i=setPara(argc,argv);
	if(i==2)  //help
	{
        i=_getch();
		return 1;
	}
	if(i)
	{		
		printf("pmf command error,please use pmf -h for help.");
		
		i=_getch();
		return 1;
	}
	//init w1_M1       w1_P1 
	//clear w1_M1_inc  w1_P1_inc		
	for(i=0;i<M;i++)	     
		for(j=0;j<DD;j++)
		{
			w1_M1[i][j]=randn_gauss(0.0,0.1);
			w1_M1_inc[i][j]=0.0;      
		}
	for(i=0;i<U;i++)	     
		for(j=0;j<DD;j++)
		{
			w1_P1[i][j]=randn_gauss(0.0,0.1);
			w1_P1_inc[i][j]=0.0;
		}

	i=getTData(0,trainRate);
	if(i)
	{ 
      printf("Read Train File Error,please check it!\n");
	  i=_getch();
	  return (1);
	}
	printf("Read Train File Successfully.\n");

	i=getTData(1,testRate);
	if(i)
	{ 
      printf("Read Test File Error,please check it!\n");
	  i=_getch();
	  return (1);
	}
	printf("Read Test File Successfully.\n");
	//评级的处理
	meanRating=0;
	for(i=0;i<R;i++)
	  meanRating=meanRating+trainRate[i].Rating;
	meanRating=meanRating/R;
	for(i=0;i<R;i++)
	  trainRate[i].Rating=trainRate[i].Rating-meanRating;
	printf("Start PMF Traing...\n");

	for(i=0;i<R;i++)
	{
		flag_M[i] = 1;
		flag_U[i] = 1;
	}
	/*迭代:梯度下降 */
	memset(countU,0,sizeof(countU));
	memset(countM,0,sizeof(countM));
	//jr_M[0]和jr_U[0]初始化
	jr_M[0] = 0;
	jr_U[0] = 0;

    for(j=0;j<R;j++)
	 {
	    lMid = trainRate[j].Mid;
	    jr_M[lMid]++;
	    lPid = trainRate[j].Pid;
	    jr_U[lPid]++;
	 }
	//jr_M和jr_U初始化
	for(j=0;j<M;j++)
	    jr_M[j+2] += jr_M[j+1];
	for(j=0;j<U;j++)
	    jr_U[j+2] += jr_U[j+1];
	
	for(j=0;j<R;j++)
	{
	    lMid = trainRate[j].Mid;
		trainRate1[jr_M[lMid-1]+countM[lMid]] = trainRate[j];
		countM[lMid]++;

		lPid = trainRate[j].Pid;
		trainRate1[jr_U[lPid-1]+countU[lPid]] = trainRate[j];
		countU[lPid]++;
	}

	//cout<<trainRate1[R-1].Mid<<endl;   //测试是否根据Mid对原来数据集经行了排序

	for(int e=0;e<MAXEPOCH;e++)
	 {
		clock_t start_time = clock(); 
		 //init 
		 for(j=0;j<U;j++)
			 for(k=0;k<DD;k++)			
				w1_P1_inc[j][k]=w1_P1_inc[j][k]*momentum;
		 for(j=0;j<M;j++)
			 for(k=0;k<DD;k++)			
				w1_M1_inc[j][k]=w1_M1_inc[j][k]*momentum;
		 for(j=0;j<R;j++)
		 { 
			if(flag_M[j]==1)
			{	
			    lPid=trainRate1[j].Pid; //取出该评级的用户id
			    lMid=trainRate1[j].Mid; //取出该评级的电影id
				/*计算预测值Ru,m=Pu*Mm*/
				pred_out[j]=0;
				for(k=0;k<DD;k++)       //DD是特征数/维度
					pred_out[j]=pred_out[j]+w1_P1[lPid-1][k]*w1_M1[lMid-1][k];
				/* 预测值和实际值的差异度 */
				pred_out[j]=2*(pred_out[j]-trainRate1[j].Rating);
				/*预测值和实际值的差异度做为参数，计算下降梯度 */
				for(k=0;k<DD;k++)
				{
				  /*评测值在用户特征矩阵及电影特征矩阵所带来的各个维度的变化*/      
				  /*Ix_m和Ix_p是R×D矩阵，R评级数  D 维度*/     
				  Ix_m=w1_P1[lPid-1][k]*pred_out[j]+lambda*w1_M1[lMid-1][k];
				  Ix_p=w1_M1[lMid-1][k]*pred_out[j]+lambda*w1_P1[lPid-1][k];

				  //residual[jr_M[lMid-1]+countM[lMid]][0] += fabs(GM[j][k]-Ix_m);//电影各个维度上梯度变化的值的和
				  //countM[lMid]++;//
				  residual[j][0] += fabs(GM[j][k]-Ix_m);//电影各个维度上梯度变化的值的和
				  GM[j][k] = Ix_m;//更新old gradient表

				  /*将评测值的变化累计到 U×M的特征矩阵中去 */
				  /* w1_M1_inc是U×D矩阵，U用户数，累计用户变化信息
				  w1_P1_inc是M×D矩阵，M电影数，累计电影变化信息*/     
				  w1_M1_inc[lMid-1][k]=w1_M1_inc[lMid-1][k]+Ix_m*epsilon/R;
				  w1_P1_inc[lPid-1][k]=w1_P1_inc[lPid-1][k]+Ix_p*epsilon/R;
			    }
				residual[j][1] = j;
			 }
		 }

		 for(j=0;j<R;j++)
		 { 
			if(flag_U[j]==1)
			{	
			    lPid=trainRate2[j].Pid; //取出该评级的用户id
			    lMid=trainRate2[j].Mid; //取出该评级的电影id
				/*计算预测值Ru,m=Pu*Mm*/
				pred_out[j]=0;
				for(k=0;k<DD;k++)       //DD是特征数/维度
					pred_out[j]=pred_out[j]+w1_P1[lPid-1][k]*w1_M1[lMid-1][k];
				/* 预测值和实际值的差异度 */
				pred_out[j]=2*(pred_out[j]-trainRate2[j].Rating);
				/*预测值和实际值的差异度做为参数，计算下降梯度 */
				for(k=0;k<DD;k++)
				{
				  /*评测值在用户特征矩阵及电影特征矩阵所带来的各个维度的变化*/      
				  /*Ix_m和Ix_p是R×D矩阵，R评级数  D 维度*/     
				  Ix_m=w1_P1[lPid-1][k]*pred_out[j]+lambda*w1_M1[lMid-1][k];
				  Ix_p=w1_M1[lMid-1][k]*pred_out[j]+lambda*w1_P1[lPid-1][k];

				  //residual[jr_M[lMid-1]+countM[lMid]][0] += fabs(GM[j][k]-Ix_m);//电影各个维度上梯度变化的值的和
				  //countM[lMid]++;//
				  residual[j][0] += fabs(GM[j][k]-Ix_p);//电影各个维度上梯度变化的值的和
				  GM[j][k] = Ix_p;//更新old gradient表

				  /*将评测值的变化累计到 U×M的特征矩阵中去 */
				  /* w1_M1_inc是U×D矩阵，U用户数，累计用户变化信息
				  w1_P1_inc是M×D矩阵，M电影数，累计电影变化信息*/     
				  w1_M1_inc[lMid-1][k]=w1_M1_inc[lMid-1][k]+Ix_m*epsilon/R;
				  w1_P1_inc[lPid-1][k]=w1_P1_inc[lPid-1][k]+Ix_p*epsilon/R;
			    }
				residual[j][1] = j;
			 }
		 }
		 //printf("%d\n",cc);
		 for(i=0;i<R;i++)
		 {
		     rescp[i][0] = residual[i][0];
			 rescp[i][1] = residual[i][1];
		 }

		 //对rescp中的数据进行排序
		 //jr_M[0] = 0;
		 for(int i=0;i<M;i++)
		 {
			quicksort(rescp,jr_M[i],jr_M[i+1]);  //2013.11.07 修改自quicksort(rescp,jr_M[i],jr_M[i+1]-1);
			quicksort(rescp,jr_U[i],jr_U[i+1]);
		 }
		//for(int i=0;i<1825;i++)
		//	cout<<rescp[i][0]<<endl;
		 //flag_M和flag_U清0
		 memset(flag_M,0,sizeof(flag_M));
		 memset(flag_U,0,sizeof(flag_U));
		 for(int i=0;i<U;i++)
			for(int j=jr_U[i];j<jr_U[i]+lambdas*(jr_U[i+1]-jr_U[i]);j++)
			{
		    	 flag_M[(int)rescp[j][1]]=1;

			}
		 /*quicksort(rescp,0,R);
		 memset(flag_M,0,sizeof(flag_M));
		 for(i=0;i<lambdas*R;i++)
			 flag_M[(int)rescp[i][1]]=1;*/

		 //update movie and user features
         for(j=0;j<U;j++)
		 {
			 for(k=0;k<DD;k++)
			{				
				w1_P1[j][k]=w1_P1[j][k]-w1_P1_inc[j][k];
			 }
		 }
		 for(j=0;j<M;j++)
		 {
			 for(k=0;k<DD;k++)
			{
				w1_M1[j][k]=w1_M1[j][k]-w1_M1_inc[j][k];
			 }
		 }
		 printf("epoch %d  ",e+1);
		 clock_t end_time = clock();
		 //输出运行时间
		 cout<<"Time is : "<<static_cast<double>(end_time-start_time)/CLOCKS_PER_SEC*1000<<"ms"<<endl;
        //caculate RMSE on the train set
		 lsum = 0;
		 for(j=0;j<R;j++)
		 {
			 //if(flag_M[j]==1)
			 //{
				//ii=randnumber[e][j];			
				ii=j;
				lPid=trainRate1[ii].Pid;
				lMid=trainRate1[ii].Mid;
				/*dot product*/
				pred_out[j]=0;
				p_out[j]=0;
				for(k=0;k<DD;k++)
				{
					pred_out[j]=pred_out[j]+w1_P1[lPid-1][k]*w1_M1[lMid-1][k];
					p_out[j]=p_out[j]+w1_P1[lPid-1][k]*w1_P1[lPid-1][k]+w1_M1[lMid-1][k]*w1_M1[lMid-1][k];
				}						
				pred_out[j]=pred_out[j]-trainRate1[ii].Rating;
				pred_out[j]=pred_out[j]*pred_out[j];//均方根误差
				p_out[j]=0.5*lambda*p_out[j];
				lsum=lsum+pred_out[j]+p_out[j];
			// }
		 }

		//Compute predictions on the validation set
		 ltsum=0;
		 for(j=0;j<TN;j++)
		 {            
			lPid=testRate[j].Pid;
			lMid=testRate[j].Mid;
			/*dot product*/
			pred_out[j]=0;
			for(k=0;k<DD;k++)
			{
				pred_out[j]=pred_out[j]+w1_P1[lPid-1][k]*w1_M1[lMid-1][k];
			}						
			pred_out[j]=pred_out[j]+meanRating;
			if(pred_out[j]>5) pred_out[j]=5;
			if(pred_out[j]<1) pred_out[j]=1;
			pred_out[j]=pred_out[j]-testRate[j].Rating;
			pred_out[j]=pred_out[j]*pred_out[j];
            ltsum=ltsum+pred_out[j];
		 }
		 printf("RMSE(Train)= %f  RMSE(Test)= %f \n",sqrt(lsum/R),sqrt(ltsum/TN));
	 }	
	 printf("The result output to the file: output.txt,Please check it.\n");
	 OutputData(outfile);
	 printf("Training is over,press any key return...");
	i=_getch(); 

	return 1;	
}

  /* output result 
   D:	xx  
   epsilon:	xx
   lambda:	xx  
   momentum:xx
   w1_P1   
    ...
   w1_M1
   ...
   */
  void OutputData(string s)
  {
	  int i,j;
	  ofstream outFile(s,ios::out);
	  outFile<<"dimension:\t"<<DD<<endl;
	  outFile<<"epsilon:\t"<<epsilon<<endl;
	  outFile<<"lambda:\t"<<lambda<<endl;
	  outFile<<"momentum:\t"<<momentum<<endl;
	  outFile<<"\n ****training result****\n"<<endl;
	  outFile<<"the matrix of w1_P1"<<endl;
	  for(i=0;i<U;i++)
     {		     
		for(j=0;j<DD;j++)
		{
          outFile<<w1_P1[i][j]<<"\t";
		}
		outFile<<endl;
	  }
	  outFile<<"\n the matrix of w1_M1 \n"<<endl;
	  for(i=0;i<M;i++)
     {		     
		for(j=0;j<DD;j++)
		{
          outFile<<w1_M1[i][j]<<"\t";
		}
		outFile<<endl;
	  }

	  outFile.close();
  }
  /*从文本文件中读取训练数据*/
 int getTData(int choice,rate *buff)  
{    
	int m=0;
	int number[3]={0};
	char buf[30];                //临时保存读取出来的文件内容
	char message[30];
	string s;
	ifstream infile;
	if(choice==0)//0表示打开train.txt
		infile.open("train.txt");
	else 
		infile.open("probe.txt");
	if(infile.is_open())          //文件打开成功,说明曾经写入过东西
	{
		 while(infile.good() && !infile.eof())
		 {
		   memset(buf,0,sizeof(buf));
		   infile.getline(buf,30);
		   int k=0;
		   for(int j=0,l=0;j<30,l<3;j++)
		   {
			
			 if(buf[j]!=9&&buf[j]!=0)//9代表空
			 {
				 k++;
				 message[k-1] = buf[j];
			 }
			 else
			 {
				
				 k=0;
				 s=message;
				 number[l]=atoi(s.c_str());
				 if(buf[j]==0)//没有用的部分
					 break;
				 l++;
				 memset(message,NULL,sizeof(message));
				
			 }
			
			
		   }
		   buff[m].Pid=number[0];
		   buff[m].Mid=number[1]; //1~10-->0~9
		   buff[m].Rating=(double)number[2];
		   m++;
		  
		 }
		 infile.close();
	}
	return 0;
}


//产生高斯分布的函数
double randn_gauss(double a,double b) 
{ 
   double v0,v1, v2, s;   
   do
	{
		 do 
		 {
		   v1 = 2 * (((double)rand()/RAND_MAX))-1;   // between -1.0 and 1.0
		   v2 = 2 * (((double)rand()/RAND_MAX))-1;   // between -1.0 and 1.0
		   s = v1 * v1 + v2 * v2;
		 } while (s >= 1 || s == 0);
		 double multiplier = double(sqrt(-2*log(s)/s));		
		 v0=v1 * multiplier;                      //均值为0，方差为1的标准正态分布
	}while(s >= 1 || s == 0);
	return v0*b+a;                        //产生均值为a,方差为b的随机信号
 }
/* main parameter*/
int    setPara(int argc,_TCHAR* argv[])
{
	int i,j;
	int iret;	
	char ss[10];

	if(argc<=1)
	{
		printf("Run PMF by default parameter,use pmf -h for help \n");		
		return 0;  
	}
	
	//命令解析		
	for(i=1;i<argc;i++)
	{			
		j=0;
		if(argv[i][0]=='-')
		{
			//可能是需要的参数
			switch(argv[i][1])
			{
				case L'h':
				case L'H':                                                             
                    printHelp();
					return 2;
					break;
				case L'T':
				case L't':                                                             
                    iret=getString(trainfile,i,argv);
					if(iret) return iret;
					break;
                case L'P':
				case L'p':                                                             
                    iret=getString(testfile,i,argv); 
					if(iret) return iret;
					break;
                case L'O':
				case L'o':                                                             
                    iret=getString(outfile,i,argv); 
					if(iret) return iret;
					break;
				case L'D':   //维度
				case L'd':                                                             
                    iret=getString(ss,i,argv); 
					if(iret) return iret;
					DD=atoi(ss);
					break;
                case L'I':  //迭代次数
				case L'i':  
					iret=getString(ss,i,argv); 
					if(iret) return iret; 
                    MAXEPOCH=atoi(ss);
					break;
                case L'E':  //
				case L'e':                                                             
                    iret=getString(ss,i,argv); 
					if(iret) return iret; 
                    epsilon=(double)atof(ss);
					break;
                case L'L':  //
				case L'l':                                                             
                    iret=getString(ss,i,argv); 
					if(iret) return iret; 
                    lambda=(double)atof(ss);
					break;
                case L'M':  //
				case L'm':                                                             
                    iret=getString(ss,i,argv); 
					if(iret) return iret; 
                    momentum=(double)atof(ss);
					break;
				default:
                    return 1;  //参数错误
			}

		}
		else
		{
            return 1;  //参数错误
		}			
	} //for		
	return 0;
}

void printHelp(void)
{
		printf("\nPMF Commdand Format: PMF [-T:] [-P:] [-O:] [-d:] [-i:] [-e:] [-l:] [-m:] [-h] \n");
		printf("-T: Tarin data file(binary),default:train.bin\n");		
		printf("-P: Test data file(binary),default:probe.bin\n");
		printf("-O: Output text file,default:output.txt\n");
		printf("-d:  Feature matrix dimension,default:10\n");
		printf("-i:  Epoch times,default:50\n");
		printf("-e:  Epsilon,default:500\n");
		printf("-l:  Lambda,default:0.01\n");
		printf("-m:  Momentum,default:0.8\n");
		printf("For example: \n");
		printf("     PMF -d:20 -i:100 -e:100 \n");
}
int getString(char *s,int i,_TCHAR* argv[])
{
    int j;
	if(argv[i][2]==':')
	{
		j=3;
		while(argv[i][j])
		{
			//printf("%c",argv[i][j]);
			s[j-3]=argv[i][j];
			j++;
		}
		s[j-3]='\0';
		
	}
	else
	{
       return 1;
	}
	if(j==3) return 1;	
	return 0;
}

void quicksort(double arr[][2],int left,int right)
{
    if(left >=right)
		return;
	int li = left,ri = right;
	double key = arr[(left+right)/2][0];
	while(li<=ri)
	{
	    for(;arr[ri][0] < key;--ri);
		for(;arr[li][0] > key;++li);
		//swap
		if(li <= ri)
		{
		   double temp = arr[li][0];
		   double temp1 = arr[li][1];
		   arr[li][0] = arr[ri][0];
		   arr[ri][0] = temp;
		   arr[li][1] = arr[ri][1];
		   arr[ri][1] = temp1;
		   ++li,--ri;
		}
	}
	if(li < right)
		quicksort(arr,li,right);
	if(ri > left)
		quicksort(arr,left,ri);
}
